name: Build and Test

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Latest GCC", artifact: "Linux.7z",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Torch
        working-directory: ${{github.workspace}}
        shell: bash
        run:   |
          if [ "$RUNNER_OS" == "Linux" ]; then
               python3 -m pip install torch==1.7.1+cpu -f https://download.pytorch.org/whl/torch_stable.html
          elif [ "$RUNNER_OS" == "macOS" ]; then
              python3 -m pip install torch==1.7.1
          else
               echo "$RUNNER_OS not supported"
               exit 1
          fi

      - name: Install Python Dependencies
        working-directory: ${{github.workspace}}
        shell: bash
        run: python3 -m pip install -r requirements.txt

      - name: Run CCache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.os }}

      - name: CMake Build with ASAN
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DMARIUS_USE_ASAN=1'
          buildWithCMake: true
          buildWithCMakeArgs: '-- -j2'
          buildDirectory: '${{ github.workspace }}/build'

      - name: Test Host Memory Embeddings Backend
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          build/marius_train test/test_configs/host_memory.ini

      - name: Test Partition Buffer Embeddings Backend
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          build/marius_train test/test_configs/test_partitioning.ini


      - name: Test FlatFile Edges Backend
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          build/marius_train test/test_configs/flat_file.ini


  packaging:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Latest GCC", artifact: "Linux.7z",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
          - {
            name: "macOS Latest Clang", artifact: "macOS.7z",
            os: macos-latest,
            cc: "clang", cxx: "clang++"
          }
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Torch
        working-directory: ${{github.workspace}}
        shell: bash
        run:   |
          if [ "$RUNNER_OS" == "Linux" ]; then
               python3 -m pip install torch==1.7.1+cpu -f https://download.pytorch.org/whl/torch_stable.html
          elif [ "$RUNNER_OS" == "macOS" ]; then
              python3 -m pip install torch==1.7.1
          else
               echo "$RUNNER_OS not supported"
               exit 1
          fi

      - name: Run Pip Install
        working-directory: ${{github.workspace}}
        shell: bash
        run: python3 -m pip install . --verbose

      - name: Test Pip Install
        working-directory: ${{github.workspace}}
        shell: bash
        run:   |
          python3 -c "import marius as m"
          python3 -c "from marius.tools import preprocess"
          marius_preprocess fb15k output_dir/
          pytest test

